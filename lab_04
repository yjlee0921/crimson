import tensorflow as tf #tensorflow를 import 하고 tf라는 이름으로 호출
tf.set_random_seed(777)  #777개의 수를 랜덤으로 호출


filename_queue = tf.train.string_input_producer(['data-01-test-score.csv'], shuffle=False, name='filename_queue')
#'data-01-test-score.csv'파일을 불려와 'filename_queue'에 저장

reader = tf.TextLineReader() # 텍스트를 한줄씩 읽어 reader에 저장
key, value = reader.read(filename_queue) #filename_queue을 읽어 한줄씩 데이터를 리턴에 key, value에 저장한다

record_defaults = [[0.], [0.], [0.], [0.]]          #실수형 데이터를 record_defaults에 값 저장
xy = tf.decode_csv(value, record_defaults=record_defaults)   #데이터를 디코딩하여 xy에 저장

train_x_batch, train_y_batch = \
    tf.train.batch([xy[0:-1], xy[-1:]], batch_size=10)  #0과 -1 사이를 10등분하여 x배치와 y배치를 정의
    
X = tf.placeholder(tf.float32, shape=[None, 3])   #x값 3개를 place holder에 저장
Y = tf.placeholder(tf.float32, shape=[None, 1])   #y값 1개를 place holder에 저장

W = tf.Variable(tf.random_normal([3, 1]), name='weight')   #가중치를 난수 값으로 생성
b = tf.Variable(tf.random_normal([1]), name='bias')        #바이어스 값을 난수로 생성

hypothesis = tf.matmul(X, W) + b  #가설함수 식 H(X) = WX+b 에 값 대입

cost = tf.reduce_mean(tf.square(hypothesis - Y))    #오차 제곱의 평균을 구해 cost에 저장

optimizer = tf.train.GradientDescentOptimizer(learning_rate=1e-5)   #경사 하강법을 실행한다. 
train = optimizer.minimize(cost)                                    #cost를 최소화 하는 값을 찾는다

sess = tf.Session()                               #새로운 세션을 생성하고 그 이름을 sess로 정의
sess.run(tf.global_variables_initializer())       #새로운 세션을 만들고 변수를 초기화
                                
coord = tf.train.Coordinator()                                    #coordinator 생성
threads = tf.train.start_queue_runners(sess=sess, coord=coord)    #큐 런너 실행하는 함수 지정

for step in range(2001):                                                   #2001번 반복
    x_batch, y_batch = sess.run([train_x_batch, train_y_batch])            #데이터를 가져와 x_batch, y_batch에 저장
    cost_val, hy_val, _ = sess.run(                           
        [cost, hypothesis, train], feed_dict={X: x_batch, Y: y_batch})    
    if step % 10 == 0:                                                     #10번에 한번씩
        print(step, "Cost: ", cost_val, "\nPrediction:\n", hy_val)         #cost 값과 prediction 값 프린트
                             .

coord.request_stop()                #thread 종료
coord.join(threads)                 #thread 다시 시작

print("Your score will be ",
      sess.run(hypothesis, feed_dict={X: [[100, 70, 101]]}))
#예상 score 출력

print("Other scores will be ",
      sess.run(hypothesis, feed_dict={X: [[60, 70, 110], [90, 100, 80]]}))
#다른 점수 예측 값 출력
